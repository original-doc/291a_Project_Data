[
  {
    "query": "How to fix 'RuntimeError: CUDA out of memory' error when training with PyTorch Lightning?",
    "method": "BM25",
    "latency": 0.002000093460083008,
    "retrieved_docs": [
      {
        "func_name": "_replace_imports",
        "docstring_summary": "Replace imports of standalone package to lightning."
      },
      {
        "func_name": "train_loop",
        "docstring_summary": "The training loop running a single training epoch."
      },
      {
        "func_name": "_parse_optimizers_schedulers",
        "docstring_summary": "Recursively parses the output of :meth:`lightning.pytorch.LightningModule.configure_optimizers`."
      },
      {
        "func_name": "load_readme_description",
        "docstring_summary": "Load readme as decribtion."
      },
      {
        "func_name": "__init__",
        "docstring_summary": "Exemplary Trainer with Fabric. This is a very simple trainer focused on readability but with reduced"
      }
    ]
  },
  {
    "query": "Why is my validation loss not decreasing in Lightning Trainer?",
    "method": "BM25",
    "latency": 0.0,
    "retrieved_docs": [
      {
        "func_name": "__init__",
        "docstring_summary": "Exemplary Trainer with Fabric. This is a very simple trainer focused on readability but with reduced"
      },
      {
        "func_name": "_replace_imports",
        "docstring_summary": "Replace imports of standalone package to lightning."
      },
      {
        "func_name": "val_loop",
        "docstring_summary": "The validation loop running a single validation epoch."
      },
      {
        "func_name": "__build_model",
        "docstring_summary": "Define model layers & loss."
      },
      {
        "func_name": "dqn_mse_loss",
        "docstring_summary": "Calculates the mse loss using a mini batch from the replay buffer."
      }
    ]
  },
  {
    "query": "What parameters does the Lightning Trainer accept?",
    "method": "BM25",
    "latency": 0.0009996891021728516,
    "retrieved_docs": [
      {
        "func_name": "_replace_imports",
        "docstring_summary": "Replace imports of standalone package to lightning."
      },
      {
        "func_name": "__init__",
        "docstring_summary": "Exemplary Trainer with Fabric. This is a very simple trainer focused on readability but with reduced"
      },
      {
        "func_name": "_parse_optimizers_schedulers",
        "docstring_summary": "Recursively parses the output of :meth:`lightning.pytorch.LightningModule.configure_optimizers`."
      },
      {
        "func_name": "configure_optimizers",
        "docstring_summary": "Initialize Adam optimizer."
      },
      {
        "func_name": "configure_optimizers",
        "docstring_summary": "Initialize Adam optimizer."
      }
    ]
  },
  {
    "query": "How to use early stopping callback in PyTorch Lightning?",
    "method": "BM25",
    "latency": 0.0009992122650146484,
    "retrieved_docs": [
      {
        "func_name": "_replace_imports",
        "docstring_summary": "Replace imports of standalone package to lightning."
      },
      {
        "func_name": "_parse_optimizers_schedulers",
        "docstring_summary": "Recursively parses the output of :meth:`lightning.pytorch.LightningModule.configure_optimizers`."
      },
      {
        "func_name": "load_readme_description",
        "docstring_summary": "Load readme as decribtion."
      },
      {
        "func_name": "device",
        "docstring_summary": "The current device this process runs on."
      },
      {
        "func_name": "__init__",
        "docstring_summary": "Exemplary Trainer with Fabric. This is a very simple trainer focused on readability but with reduced"
      }
    ]
  },
  {
    "query": "How to implement custom metrics in LightningModule?",
    "method": "BM25",
    "latency": 0.0009999275207519531,
    "retrieved_docs": [
      {
        "func_name": "train_loop",
        "docstring_summary": "The training loop running a single training epoch."
      },
      {
        "func_name": "step_scheduler",
        "docstring_summary": "Steps the learning rate scheduler if necessary."
      },
      {
        "func_name": "_parse_optimizers_schedulers",
        "docstring_summary": "Recursively parses the output of :meth:`lightning.pytorch.LightningModule.configure_optimizers`."
      },
      {
        "func_name": "val_loop",
        "docstring_summary": "The validation loop running a single validation epoch."
      },
      {
        "func_name": "training_step",
        "docstring_summary": "Carries out a single step through the environment to update the replay buffer. Then calculates loss "
      }
    ]
  }
]